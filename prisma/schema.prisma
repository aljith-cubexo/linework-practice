generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// User model
enum AccountType {
  BASIC
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  userName       String?          @unique
  password       String?
  phoneNumber    String?          @unique
  accountType    AccountType      @default(BASIC)
  isDeleted      Boolean?         @default(false)
  createdAt      DateTime?        @default(now())
  updatedAt      DateTime?        @updatedAt
  roles          Role?
  Profile        Profile?
  Store          Store[]
  Cart           Cart[]
  Order          Order[]
  Product        Product[]
  UserPermission UserPermission[] @relation("seller")
  worker         UserPermission[] @relation("worker")

  ProductReview   ProductReview[]
  productWishList productWishList[]

  StoreReview   StoreReview[]
  BitmartApiKey BitmartApiKey[]
  UserPlan      UserPlan?
  storeUser     storeUser?

  subscriptionOrder subscriptionOrder[]
}

enum RoleType {
  USER
  ADMIN
  SELLER
}

model Role {
  id        Int      @id @default(autoincrement())
  role      RoleType @default(USER)
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int      @unique
  isDeleted Boolean  @default(false)
}

model Permissions {
  id             Int              @id @default(autoincrement())
  task_name      String
  subtask        String
  isDeleted      Boolean          @default(false)
  userPermission UserPermission[]

  @@unique([task_name, subtask])
}

model UserPermission {
  userId       Int
  user         User        @relation("worker", fields: [userId], references: [id])
  seller       User        @relation("seller", fields: [sellerId], references: [id])
  sellerId     Int
  permissionId Int
  Permissions  Permissions @relation(fields: [permissionId], references: [id])
  isDeleted    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@id([userId, permissionId])
}

// Profile model
model Profile {
  id                   Int             @id @default(autoincrement())
  firstName            String?
  lastName             String?
  address              String?
  city                 String?
  brief                String?
  state                String?
  country              String?
  zipCode              String?
  role                 Int?
  numberOfCollections  Int?
  numberOfFollower     Int?
  numberOfFollowing    Int?
  userAppleId          String?
  isEmailVerifiedAt    Boolean?        @default(false)
  numberOfNftFavourite Int             @default(0)
  avatarUrl            String?
  avatarThumbnailUrl   String?
  photoCoverUrl        String?
  isInternalUser       Boolean?        @default(false)
  lwcTokenBalance      Float?
  usdtTokenBalance     Float           @default(0)
  isBitmartConnected   Boolean         @default(false)
  isDeleted            Boolean         @default(false)
  selfDeletedAt        DateTime?
  status               String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  user                 User            @relation(fields: [userId], references: [id])
  userId               Int             @unique
  plan                 UserPlan[]
  bitmartApiKey        BitmartApiKey?  @relation(fields: [bitmartApiKeyId], references: [id])
  SocailNetwork        SocailNetwork[]
  bitmartApiKeyId      Int?
}

model BitmartApiKey {
  id        Int       @id @default(autoincrement())
  memo      String
  accessKey String
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  Profile   Profile[]
}

model SocailNetwork {
  id        Int      @id @default(autoincrement())
  type      String
  url       String?
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int?

  @@unique([type, profileId])
}

enum Currency {
  EURO
  USD
  GBP
  JPY
  AUD
  LWC
}

model Product {
  id               Int                @id @default(autoincrement())
  name             String
  image            String?
  gallery          ProductImage[]
  price            Int
  currency         Currency           @default(EURO)
  tax              Float
  shipping         String
  brand            String
  country          String
  size             String
  description      String
  condition        String
  note             String?
  total            Int
  sold             Int
  remained         Int
  store            Store              @relation(fields: [storeId], references: [id])
  storeId          Int
  User             User               @relation(fields: [userId], references: [id])
  userId           Int
  isDeleted        Boolean            @default(false)
  isPromoted       Boolean            @default(false)
  status           Status             @default(ARCHIVED)
  category         Category?          @relation(fields: [categoryId], references: [id])
  categoryId       Int?
  reviews          ProductReview[]
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  productWishList  productWishList[]
  CartItems        CartItems[]
  productPromotion productPromotion[]
}

model ProductReview {
  id            Int                    @id @default(autoincrement())
  title         String?
  rating        Float
  review        String?
  isDeleted     Boolean                @default(false)
  product       Product                @relation(fields: [productId], references: [id])
  productId     Int
  user          User                   @relation(fields: [userId], references: [id])
  isDelivered   Boolean                @default(false)
  userId        Int
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  ReviewGallery ProductReviewGallery[]
}

model storePromotion {
  id          Int       @id @default(autoincrement())
  store       Store     @relation(fields: [storeId], references: [id])
  storeId     Int
  keyword     Json?
  currency    Currency  @default(LWC)
  expiredTime DateTime?
  isDeleted   Boolean   @default(false)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model productPromotion {
  id          Int       @id @default(autoincrement())
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  keyword     Json?
  currency    Currency  @default(LWC)
  expiredTime DateTime?
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProductReviewGallery {
  id              Int           @id @default(autoincrement())
  url             String?
  altText         String?
  isDeleted       Boolean       @default(false)
  ProductReview   ProductReview @relation(fields: [productReviewId], references: [id])
  productReviewId Int
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  altText   String
  isDeleted Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique()
  description String
  isDeleted   Boolean   @default(false)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  product     Product[]
  Store       Store[]
}

model Country {
  id        Int      @id @default(autoincrement())
  name      String   @unique()
  url       String?
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  ACTIVE
  ARCHIVED
  DRAFT
}

model Store {
  id               Int              @id @default(autoincrement())
  name             String
  location         String
  image            String?
  status           Status           @default(ARCHIVED)
  description      String?
  rate             Float            @default(0)
  start_time_close Int?
  end_time_close   Int?
  openDateTime     DateTime?
  isInvisible      Boolean          @default(false)
  isPromoted       Boolean          @default(false)
  isDeleted        Boolean          @default(false)
  user             User             @relation(fields: [userId], references: [id])
  userId           Int
  Category         Category         @relation(fields: [categoryId], references: [id])
  categoryId       Int
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  images           StoreImage[]
  review           StoreReview[]
  Product          Product[]
  storeView        storeView[]
  CartItems        CartItems[]
  Order            Order[]
  storePromotion   storePromotion[]
}

model storeView {
  id        Int      @id @default(autoincrement())
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model productWishList {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model StoreReview {
  id        Int       @id @default(autoincrement())
  review    String
  rating    Float
  store     Store     @relation(fields: [storeId], references: [id])
  storeId   Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([storeId, userId])
}

model StoreImage {
  id        Int      @id @default(autoincrement())
  url       String
  isDeleted Boolean  @default(false)
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        Int         @id @default(autoincrement())
  userId    Int
  isDeleted Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  Order     Order[]
  CartItems CartItems[]
}

model CartItems {
  id          Int      @id @default(autoincrement())
  cartId      Int
  productId   Int
  total_price Int
  total_qty   Int
  storeId     Int
  isCheckout  Boolean  @default(false)
  isReviewed  Boolean  @default(false)
  product     Product  @relation(fields: [productId], references: [id])
  cart        Cart     @relation(fields: [cartId], references: [id])
  store       Store    @relation(fields: [storeId], references: [id])
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@unique([cartId, productId])
}

enum OrderStatus {
  PENDING
  FULFILLED
  UNFULFILLED
}

enum TrackingStatus {
  DELIVERING
  DONE
  RETURNED
}

enum OrderStatusEnum {
  PENDING
  ACCEPTED
  REJECTED
}

model Order {
  id               String          @id @default(uuid())
  userId           Int
  qty              Int
  items            Int
  storeId          Int
  cartId           Int
  discount         Float
  tax              Float
  deliveryFee      Float
  deliveryTime     DateTime
  isCancelled      Boolean         @default(false)
  paymentId        Int
  address          String
  totalAmount      Float
  RejectDesc       String          @default("null")
  orderStatus      OrderStatus     @default(PENDING)
  trackingStatus   TrackingStatus?
  AcceptenceStatus OrderStatusEnum @default(PENDING)
  Cart             Cart            @relation(fields: [cartId], references: [id])
  Store            Store           @relation(fields: [storeId], references: [id])
  user             User            @relation(fields: [userId], references: [id])
  PaymentDetails   PaymentDetails?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@unique([cartId, storeId])
}

enum PaymentStatus {
  FAILED
  DONE
}

model PaymentDetails {
  id          Int           @id @default(autoincrement())
  orderId     String        @unique
  totalAmount Int
  isDeleted   Boolean       @default(false)
  Order       Order         @relation(fields: [orderId], references: [id])
  status      PaymentStatus
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Plan {
  id                Int                 @id @default(autoincrement())
  name              String
  price             Float
  currency          Currency            @default(LWC)
  benefit           Json
  isPopular         Boolean             @default(false)
  expireTime        Int
  isDeleted         Boolean             @default(false)
  UserPlan          UserPlan[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  subscriptionOrder subscriptionOrder[]
}

model UserPlan {
  id                 Int               @id @default(autoincrement())
  Plan               Plan              @relation(fields: [planId], references: [id])
  planId             Int
  User               User              @relation(fields: [userId], references: [id])
  userId             Int               @unique
  expireTime         Int
  isDeleted          Boolean           @default(false)
  subscriptionOrder  subscriptionOrder @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId String            @unique
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  Profile            Profile?          @relation(fields: [profileId], references: [id])
  profileId          Int?
}

model storeUser {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model subscriptionOrder {
  id             String          @id @default(uuid())
  user           User            @relation(fields: [userId], references: [id])
  userId         Int
  Plan           Plan            @relation(fields: [planId], references: [id])
  planId         Int
  amount         Float
  orderStatus    OrderStatusEnum @default(PENDING)
  isCancelled    Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  UserPlan       UserPlan?
  orderDesc      String
  currencySymbol Currency        @default(LWC)
}
